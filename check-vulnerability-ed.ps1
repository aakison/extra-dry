$global:failedLines = 0;
$global:invalidProjectFound = $false;
Function Scan-Line-For-Vulnerability {
  [CmdletBinding()]
  Param([Parameter(ValueFromPipeline)] $line)
  process {
    if($line -isnot [System.Management.Automation.ErrorRecord]) {
      Write-Host $line
      if($line.Contains(" Critical ") -OR $line.Contains(" Moderate ") -OR $line.Contains(" High ")) {
        $global:failedLines = $global:failedLines + 1
      }
    }
  }
}
try {
  dotnet list E:\Projects\Repos\extra-dry\ExtraDry package --vulnerable --include-transitive 2>&1 | Scan-Line-For-Vulnerability
}
catch {
  # dotnet list errors if there is a dcproj in the solution. Capture if there is so we can ignore the error.
  # See: https://github.com/NuGet/Home/issues/12520
  if($_.Exception.Message.Contains(".dcproj")) {
    $global:invalidProjectFound = $true
  }
}
if($global:failedLines) {
  Write-Host
  Write-Host "Vulnerabilities in dependant package have been found, please upgrade or replace." -ForegroundColor Red
  exit 1
}
if(($LASTEXITCODE -eq 1) -AND $global:invalidProjectFound) {
  $error.Clear()
  $global:LASTEXITCODE = 0
  exit 0
}
# if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }