@namespace ExtraDry.Blazor.Forms
@using ExtraDry.Blazor.Internal
@typeparam T

<fieldset class="@CssClasses">
    @if(!string.IsNullOrWhiteSpace(FormFieldset.Legend)) {
        <legend class="@CssClasses">@FormFieldset.Legend</legend>
    }
    @foreach(var group in FormFieldset.Groups) {
        var redundant = "";// line.FormProperties.Count == 1 && line.FormProperties.First().FieldCaption == fieldset.Legend ? "redundant" : "";
        <div class="group @group.ClassName">
            @if(group.Type == FormGroupType.Element) {
                <div class="line header">
                    <span class="caption">Video</span>
                    <button @onclick="@(() => DeleteItem(group.ParentTarget, group.Target))">X</button>
                    @*<DryButton Target="@group.Target" Command="@MoveUpCommand" />
                        <DryButton Target="@group.Target" Command="@MoveDownCommand" />*@
                </div>
            }
            @foreach(var line in group.Lines) {
                <div class="line properties @redundant">
                    @foreach(var property in line.FormProperties) {
                        <DryInput Model="@line.Model" Property="@property" OnValidationChanged="@OnValidationChanged" />
                    }
                    @foreach(var command in line.Commands) {
                        if(command == Internal.FormCommand.AddNew) {
                            <DryButton Target="@line.Model" Command="@AddNewCommand" />
                        }
                        else {
                            Console.WriteLine("Unrecognized command");
                        }
                    }
                </div>
            }
        </div>
    }
</fieldset>
