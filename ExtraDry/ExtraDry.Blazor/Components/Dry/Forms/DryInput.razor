@namespace ExtraDry.Blazor.Forms
@typeparam T
@inherits OwningComponentBase

<div class="@CssClasses" @attributes="@UnmatchedAttributes">
    @if(Property == null) {
        <progress>loading...</progress>
    }
    else {
        <label class="@CssClasses" @onclick="ToggleDescription" title="@TextDescription">
            <span class="caption">@Property.FieldCaption</span>
            @* TODO: These old icon styles don't work, what to do with them? *@
            @if(Property.HasDescription) {
                <i class="description"></i>
            }
            @if(ReadOnly) { 
                <i class="read-only"></i>
            }
            @if(Editable && Property.HasDiscreteValues == false) { 
                if(Property.IsRequired) {
                    <i class="required"></i>
                }
                else {
                    <i class="optional"></i>
                }
            }
        </label>
        @if(HasDescription && ShowDescription) {
            <span class="description @CssClasses">@((MarkupString)HtmlDescription)</span>
        }
        @if(Property.HasBooleanValues) {
            var value = ((bool?)Property.GetValue(Model) ?? false) == true;
            <input type="checkbox" checked="@value" @onchange="HandleChange" />
        }
        else if(Property.HasDiscreteValues) {
            var selectedValue = Property.GetValue(Model);
            @if(Property.ControlType == ControlType.RadioButtons) {
                <div class="radio-buttons @Property.DisplayClass">
                    @foreach (var value in Property.GetDiscreteValues()) {
                        var selected = value.Key.ToString() == selectedValue?.ToString(); // force object to enum compare
                        var valueClassName = value.Key.ToString()?.ToLower();
                        var selectedClassName = selected ? $"selected {valueClassName}" : $"{valueClassName}";
                        <button class="@selectedClassName" @onclick="@(e => HandleClick(value.Key))">
                            @if(!string.IsNullOrWhiteSpace(Property.Icon)) {
                                var source = string.Format(Property.Icon, valueClassName);
                                <img class="@valueClassName" src="@source" />
                            }
                            @if(!string.IsNullOrWhiteSpace(Property.CaptionTemplate)) {
                                var content = string.Format(Property.CaptionTemplate, value.Title);
                                <span class="@valueClassName">@content</span>
                            }
                        </button>
                    }
                </div>
            }
            else { 
                @if(ReadOnly) {
                    <select class="@CssClasses readonly" disabled title="@Property.FieldCaption">
                        <option value="@selectedValue?.ToString()" selected>@selectedValue?.ToString()</option>
                    </select>
                } 
                else { 
                    <select class="@CssClasses" @onchange="HandleChange" title="@Property.FieldCaption" >
                        @foreach(var value in Property.GetDiscreteValues()) {
                            var selected = value.Key.ToString() == selectedValue?.ToString(); // force object to enum compare
                            <option value="@value.Key" selected="@selected">@value.Title</option>
                        }
                    </select>
                }
            }
        }
        else if (Property.InputType == typeof(DateTime) || Property.InputType == typeof(TimeOnly) || Property.InputType == typeof(DateOnly))
        {
            <DryInputDateTime CssClass="@CssClasses" Model="@Model" Property="@Property" ReadOnly="@ReadOnly" />
        }
        else if(Property.HasTextRepresentation) {
            if(Property.FieldLength > 256) {
                var rows = Math.Min(Property.FieldLength / 100 ?? 1, 10);
                <textarea class="@CssClasses" rows="@rows" readonly="@ReadOnly" placeholder="@Property.Display?.Prompt" @onchange="HandleChange">@Value</textarea>
            }
            else { 
                <DryInputText CssClass="@CssClasses" Model="@Model" Property="@Property" ReadOnly="@ReadOnly"/>
            }
        } 
        else if (Property.HasNumericRepresentation) {
            <DryInputNumeric CssClass="@CssClasses" Model="@Model" Property="@Property" ReadOnly="@ReadOnly" />
        }
        else if(LookupProviderOptions != null) {
            var selectedValue = Property.GetValue(Model);
            @if(Property.HasArrayValues) {
                <DryInputMultipleSelect CssClass="@CssClasses" Model="@Model" Property="@Property" Values="@LookupValues" />
            }
            else { 
                <DryInputSingleSelect CssClass="@CssClasses" Model="@Model" Property="@Property" Values="@LookupValues" />
            }
        }
        else if(ReadOnly) {
            var selectedValue = Property.GetValue(Model);
            <span class="@CssClasses">@selectedValue?.ToString()</span>
        }
        else { 
        }
        @if(!valid) {
            <span class="validation @CssClasses">@validationMessage</span>
        }
    }
</div>
