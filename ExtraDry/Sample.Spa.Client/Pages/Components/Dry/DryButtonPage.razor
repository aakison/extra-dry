@page "/components/dry/dry-button"
@*@implements ISubjectViewModel<Employee>*@

<section>
    <h2>DryButton</h2>
    <p>
        The <code>&lt;DryButton&gt;</code> component is a Model/ViewModel consuming replacement 
        for a static button.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <CodeBlock Lang="blazor">
        &lt;DryButton ViewModel="@@this" MethodName="@@nameof(CountClicks)" /&gt;
        &lt;div>Click count: @@ClickCounter&lt;/div>

        @@code {
            [Command(Icon = "plus")]
            public void CountClicks()
            {
                ++ClickCounter;
                StateHasChanged();
            }

            private int ClickCounter { get; set; }
        }
    </CodeBlock>
    <DryButton ViewModel="@this" MethodName="@nameof(CountClicks)" />
    <div>Click count: @ClickCounter</div>
    <h3>Advanced Usage</h3>
    <CodeBlock Lang="blazor">
        &lt;DryButton ViewModel="@@this" Model="@@Button1State" MethodName="@@nameof(CountModelClicks)" /&gt;
        &lt;DryButton ViewModel="@@this" Model="@@Button2State" MethodName="@@nameof(CountModelClicks)" /&gt;
        &lt;div>Button 1 count: @@Button1State.ClickCounter&lt;/div>
        &lt;div>Button 2 count: @@Button2StateClickCounter&lt;/div>

        @@code {
            [Command(Icon = "plus")]
            public void CountModelClicks(ButtonClickState button)
            {
                ++button.ClickCounter;
                StateHasChanged();
            }

            private int ClickCounter { get; set; }

            private class ButtonClickState {
                public int ClickCounter { get; set; }
            }

            private ButtonClickState Button1State { get; set; }

            private ButtonClickState Button2State { get; set; }
        }
    </CodeBlock>
    <DryButton ViewModel="@this" Model="@Button1State" MethodName="@nameof(CountModelClicks)" />
    <DryButton ViewModel="@this" Model="@Button2State" MethodName="@nameof(CountModelClicks)" />
    <div>Button 1 count: @Button1State.ClickCounter</div>
    <div>Button 2 count: @Button2State.ClickCounter</div>
</section>
<section>
    <h3>Configuration</h3>
    <p>
        This is a standalone component, no configuration is required.
    </p>
</section>
<section>
    <h3>Semantic Styles</h3>
    <p>The component wraps the <code>Button</code> component and styles are the same as it.</p>
</section>
<section>
    <h3>Tips &amp; Practices</h3>
    <ul>
        <li>The component encapsulate the <code>Button</code>, unused attributes are chained to that component.</li>
        <li>Not typically used directly in applications, use a wrapper around buttons, e.g. DryButtonBar.</li>
    </ul>
</section>
<section>
    <h3>See Also</h3>
    <ul>
        <li><a href="/components/standard/button"><code>Button</code> Component</a></li>
        <li><a href="/components/dry/dry-button-bar"><code>Button</code> Component</a></li>
    </ul>
</section>

@code {

    [Command(Icon = "plus", Affordance = "select")]
    public void CountClicks()
    {
        ++ClickCounter;
        StateHasChanged();
    }

    [Command(Icon = "plus", Affordance = "select")]
    public void CountModelClicks(ButtonClickState button)
    {
        ++button.ClickCounter;
        StateHasChanged();
    }

    private int ClickCounter { get; set; }

    public class ButtonClickState
    {
        public int ClickCounter { get; set; }
    }

    private ButtonClickState Button1State { get; set; } = new();

    private ButtonClickState Button2State { get; set; } = new();

}
