@inject IListService<Company> CompanyListService;
@inject CrudService<Company> CompanyCrudService;
@inject NavigationManager Navigation;
@inject AppViewModel AppViewModel;

<h1>Companies</h1>

<DryErrorBoundary>
    <DryPageQueryView @ref=QueryView>
        @*<TableMenu TItem="Company" />*@
        <DryFilter TItem="Company" Affordance="" Icon="theme" ShowPreview="false" />
        <DryTable TItem="Company" ViewModel="@this" ItemsService="@CompanyListService" @ref="companyTable" />
    </DryPageQueryView>
</DryErrorBoundary>

@code {
    private DryTable<Company> companyTable = null!;

    [Hyperlink(nameof(Company.Title))]
    public HyperlinkContext NavLink(Company company)
    {
        return new HyperlinkContext($"/admin/works/companies/list/{company.Uuid}")
        {
            Title = $"Edit company {company.Title}",
            DisplayClass = "company-edit-link"
        };
    }

    [Command(CommandContext.Default, Icon = "edit")]
    public void Edit(Company company)
    {
        Navigation.NavigateTo(NavLink(company)?.Href ?? string.Empty);
    }

    private DryPageQueryView QueryView { get; set; } = default!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (AppViewModel.Filter != null && QueryView != null)
        {
            QueryView.PageQueryBuilder.ParseFilters(AppViewModel.Filter);
            AppViewModel.Filter = null;
        }
        base.OnAfterRender(firstRender);
    }

    private async Task CompanyStateHasChanged(Guid uuid)
    {
        var updatedCompany = await CompanyCrudService.RetrieveAsync(uuid);
        if (updatedCompany == null) {
            return;
        }
        var shownCompany = companyTable.ShownItems.FirstOrDefault(itemInfo => itemInfo.Item?.Uuid == uuid);
        if(shownCompany?.Item == null) {
            return;            
        }
        shownCompany.Item = updatedCompany;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        AppViewModel.OnChange += CompanyStateHasChanged;
    }

    public void Dispose()
    {
        AppViewModel.OnChange -= CompanyStateHasChanged;
    }
}
