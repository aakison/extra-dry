@inject StatService<Sector> SectorStatService;

<section>
    <article>
        <x-statlet>
            <label>Active Sectors</label>
            <div>@ActiveSectors</div>
        </x-statlet>
        <x-statlet>
            <label>Total Assets</label>
            <div>3,843</div>
        </x-statlet>
        <x-statlet>
            <label>Active Assets</label>
            <div>3,431</div>
        </x-statlet>
        <x-statlet>
            <label>Disposed Assets</label>
            <div>212</div>
        </x-statlet>
        <x-statlet>
            <label>Most Faulty Assets</label>
            <div>432</div>
        </x-statlet>
        <x-statlet>
            <label>Asset Value</label>
            <div>$3,220,000</div>
        </x-statlet>
    </article>
</section>

@code {
    private int? ActiveSectors { get; set; } = null;

    protected async override Task OnInitializedAsync()
    {
        ActiveSectors = await GetCounter();
    }

    public async Task<int> GetCounter()
    {
        var foo = await SectorStatService.RetrieveAsync(null);
        var bar = foo?.Distributions?.FirstOrDefault(d => d.PropertyName == "State");
        return bar?.Counts?.FirstOrDefault(c => c.Key == "Active").Value ?? 0;
    }
}
