@inject StatService<Sector> SectorStatService;

<section>
    <article>
        <x-statlet>
            <Suspense TModel="int" ItemProvider=@GetCounter TimeoutDuration="5000">
                <ChildContent>
                    <label>Active Sectors</label>
                    <div>@context</div>
                </ChildContent>
                <Timeout>
                    <div>
                        <Icon CssClass=@context.Size.ToString().ToLower() Key="loader-timeout" />
                    </div>
                    <div>Component timeout, <a href="" @onclick=@context.Reload @onclick:preventDefault>try again</a></div>
                </Timeout>
            </Suspense>
        </x-statlet>
        <x-statlet>
            <label>Total Assets</label>
            <div>3,843</div>
        </x-statlet>
        <x-statlet>
            <label>Active Assets</label>
            <div>3,431</div>
        </x-statlet>
        <x-statlet>
            <label>Disposed Assets</label>
            <div>212</div>
        </x-statlet>
        <x-statlet>
            <label>Most Faulty Assets</label>
            <div>432</div>
        </x-statlet>
        <x-statlet>
            <label>Asset Value</label>
            <div>$3,220,000</div>
        </x-statlet>
    </article>
</section>

@code {

    private async Task<int> GetCounter(CancellationToken cancellationToken)
    {
        var foo = await SectorStatService.RetrieveAsync(null, cancellationToken);
        var bar = foo?.Distributions?.FirstOrDefault(d => d.PropertyName == "State");
        return bar?.Counts?.FirstOrDefault(c => c.Key == "Active").Value ?? 0;
    }
}
