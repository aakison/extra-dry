@page "/controls/standard/icon"
@inject NavigationManager Navigation;

<section>
    <h2>Icon</h2>
    <p>
        The <code>&lt;Icon&gt;</code> component consistently displays images from a key.
    </p>
    <p>
        Provide a list of icons by adding <code>IconInfo</code> objects to an enclosing <code>&lt;Theme&gt;</code> tag.
        Each <code>IconInfo</code> maps a key name to consistent renderings of <code>&lt;img&gt;</code> tags.  This includes:
        <ul>
            <li>Centralized file location - manage cache busting and versions in one place.</li>
            <li>Consistent <code>alt</code> attributes - helps enforce WCAG compliance.</li>
            <li>Apply additional CSS classes - global and/or local control of size, filters, etc.</li>
        </ul>
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <pre>
        <code lang="blazor">&lt;Icon Key="@Key" /&gt;</code>
    </pre>
    <p>
        <Icon Key="@Key" />
    </p>
    <pre>
        <code lang="blazor">&lt;Icon Key="@Key" Alt="Search Site" /&gt;</code>
    </pre>
    <p>
        <Icon Key="@Key" Alt="Search Site" />
    </p>
</section>
<section>
    <h3>Configuration</h3>
    <p>
        In the main layout file, update the razor component to have an enclosing <code>&lt;Theme&gt;</code> tag. 
        Set the <code>Icons</code> attribute to an enumerable set of Icons such as below.
    </p>
    <pre><code lang="blazor">@@inherits LayoutComponentBase

&lt;Theme Icons="@@Icons">
    &lt;main>
        @@Body
    &lt;/main>
&lt;/Theme>

@@code {
    public IconInfo[] Icons = new IconInfo[] {
        new IconInfo("search", "/img/glyphs/magnifying-glass-light.svg", "Search", "glyph"),
        new IconInfo("logo", "/img/icons/logo.svg", "Estra Dry", "icon"),
    };
}</code></pre>
    <p>
        Each <code>IconInfo</code> takes a key, path, alternate text, and optionally CSS classes.  
    </p>
    <p>
        This system works in conjuction with but is separate from the <code>IconTemplate</code> attribute of the <code>&lt;Theme&gt;</code> tag.
    </p>
</section>
<section>
    <h3>Good Practices</h3>
    <ul>
        <li>Name the Key for icons using the entity or action that they represent, e.g. search or logo.</li>
        <li>Name the files as descriptions of what is in the image (not the action), e.g. magnifying-glass-strong.svg</li>
        <li>Prefer the use of SVG files for quality and size (note that this is not a SVG file security issue as these files are published by you and not uploaded by your users.)</li>
        <li>Skip Alternate text when redundant, if the icon always appears next to context text, then use an empty string.</li>
        <li>Keep Alternate text short, 5-10 words describing the icon when necessary.</li>
        <li>Remember Alternate text context, if the icon changes meaning based on the context it's in, leave text blank and add <code>Alt</code> when using <code>&lt;Icon&gt;</code>.</li>
    </ul>
</section>
<section>
    <h3>See Also</h3>
    <ul>
        <li><a href="~">Theme Component</a></li>
        <li><a href="~"><code>IconInfo</code> Class</a></li>
    </ul>
</section>

@code {

    [Command(CommandContext.Alternate, Icon = "edit")]
    public void Edit(Company company)
    {
        Navigation.NavigateTo($"/companies/{company.Uuid}");
    }

    private string Key { get; set; } = "search";

}
