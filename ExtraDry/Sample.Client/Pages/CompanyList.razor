@page "/companies"
@page "/companies/{CompanyUuid:guid}"
@inject IListService<Company> CompanyService;
@inject NavigationManager Navigation;

<DryPageQueryView>
    <TableMenu TItem="Company" />

    @{
        var count = 100;
        var size = "several";
        if(count < 10) {
            size = "few";
        }
        if(count > 40) {
            size = "many";
        }
        var data = new List<string>();
        @for(int i = 0; i < count; ++i) {
            data.Add($"Huzzah {i}");
        }
    }
    <div class="Huzzah">
        <button @onclick="@OnClick">Click Me</button>
        <MiniDialog @ref="MiniDialog" CssClass="@size" LoseFocusAction="MiniDialogAction.Disabled" AnimationDuration="100" OnSubmit="AlertClick">
            <FlexiSelectForm Data="@data" />
        </MiniDialog>
    </div>

    <DryTable TItem="Company" ViewModel="@this" ItemsService="@CompanyService" />
</DryPageQueryView>

@if (CompanyUuid != Guid.Empty)
{
    <DialogBox>
        <DryErrorBoundary>
            <CompanyEditDialog Uuid="@CompanyUuid" />
        </DryErrorBoundary>
    </DialogBox>
}

@code {
    public async Task OnClick()
    {
        await MiniDialog.Show();
    }

    public void AlertClick(DialogEventArgs _)
    {
        Console.WriteLine("Alert Click");
    }

    [Parameter]
    public Guid CompanyUuid { get; set; } = Guid.Empty;

    [Command(CommandContext.Alternate, Icon = "edit")]
    public void Edit(Company company)
    {
        Navigation.NavigateTo($"/companies/{company.Uuid}");
    }

    [Command(CommandContext.Alternate, Icon = "briefcase", Name = "Do It")]
    public async Task Pop()
    {
        await MiniDialog.Toggle();
    }

    private MiniDialog MiniDialog { get; set; }

}
