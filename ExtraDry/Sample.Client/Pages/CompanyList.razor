@page "/companies"
@page "/companies/{CompanyUuid:guid}"
@inject IListService<Company> CompanyService;
@inject NavigationManager Navigation;

<DryPageQueryView>
    <TableMenu TItem="Company" />

    @{
        var count = 100;
        var size = "several";
        if(count < 10) {
            size = "few";
        }
        if(count > 40) {
            size = "many";
        }
        var data = new List<string>();
        @for(int i = 0; i < count; ++i) {
            data.Add($"Huzzah {i}");
        }

        Users.Add(new User("Adrian Akison", "adrian.akison@fmiworks.com"));
        Users.Add(new User("David Wilton", "david.wilton@fmiworks.com"));
        Users.Add(new User("Shae Griffiths", "shae.griffiths@fmiworks.com"));
        Users.Add(new User("Sam Camilleri", "sam.camilleri@fmiworks.com"));
        Users.Add(new User("Hai Vu", "hai.vu@fmiworks.com"));
        Users.Add(new User("Jaspal Muker", "jaspal.muker@fmiworks.com"));
        Users.Add(new User("Anthony Pasquale", "antonio.pasquale@fmiworks.com"));
        Users.Add(new User("Wayne Scott", "wayne.scott@fmiworks.com"));
        Users.Add(new User("Kevin Thomas", "kevin.thomase@fmiworks.com"));

    }

    <div>@TestSelect?.Title</div>

    <FlexiSelect TItem="User" CssClass="@size" Data="@Users" MultiSelect="false" @bind-Value="TestSelect" />
    <FlexiSelect CssClass="@size" Data="@data" MultiSelect="true" />

@*    <DryTable TItem="Company" ViewModel="@this" ItemsService="@CompanyService" />
*@</DryPageQueryView>

@if (CompanyUuid != Guid.Empty)
{
    <DialogBox>
        <DryErrorBoundary>
            <CompanyEditDialog Uuid="@CompanyUuid" />
        </DryErrorBoundary>
    </DialogBox>
}

@code {
    public class User : IPreviewSubject, ITitleSubject {
        public User(string name, string email)
        {
            Title = name;
            Subtitle = email;
            Thumbnail = DryGravatar.ToGravatarUrl(email, 40);
        }
        public string CssClass { get; set; } = string.Empty;
        public string Thumbnail { get; set; } = string.Empty;
        public string Title { get; set; }
        public string Subtitle { get; set; }
    }

    private List<User> Users { get; set; } = new();

    public User TestSelect { get; set; }

    public async Task OnClick()
    {
        var t = new InputText();
        await MiniDialog.Show();
    }

    public async Task OnClick2()
    {
        await MiniDialog2.Show();
    }

    public void AlertClick(DialogEventArgs _)
    {
        Console.WriteLine("Alert Click");
    }

    [Parameter]
    public Guid CompanyUuid { get; set; } = Guid.Empty;

    [Command(CommandContext.Alternate, Icon = "edit")]
    public void Edit(Company company)
    {
        Navigation.NavigateTo($"/companies/{company.Uuid}");
    }

    [Command(CommandContext.Alternate, Icon = "briefcase", Name = "Do It")]
    public async Task Pop()
    {
        await MiniDialog.Toggle();
    }

    private MiniDialog MiniDialog { get; set; }

    private MiniDialog MiniDialog2 { get; set; }

}
