@page "/components/special/file-validator"

<section>
    <h2>FileValidator</h2>
    <p>
        The <code>FileValidator</code> class enables robust client and server validation of files 
        that are suitable for uploading in typical applications.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <CodeBlock Lang="blazor">
        &lt;InputFile OnChange="@@LoadFileAsync" />

        @@code {
            private async Task LoadFileAsync(InputFileChangeEventArgs args)
            {
                // Clear injected validator so it can be reused.
                Validator.Clear();

                // Validate the file using client-side rules.
                Validator.ValidateFile(args.File);
                Validator.ThrowIfInvalid();

                // Send to server, which will also validate server-side rules.
                var blob = await Blobs.CreateAsync(args.File);
            }

            [Inject]
            private FileValidator Validator { get; set; } = null!;

            [Inject]
            private BlobService&lt;Blob> Blobs { get; set; } = null!;
        }
    </CodeBlock>
    <InputFile OnChange="@LoadFileAsync" />
    <div>Filename: @Filename</div>
    <div>Mime Type: @FileMimeType</div>
    <div>Client Validation: @ClientValidation</div>
    <div>Server Validation: @ServerValidation</div>
    <div>MD5 Validation: @Md5Validation</div>
</section>
<section>
    <h3>Configuration</h3>
    <p>Basic configuration requires the dependency injection of the FileValidator class using an extension method:</p>
    <CodeBlock lang="C#">
        services.AddFileValidation();
    </CodeBlock>
    <p>Advanced configuration is available when setting up the dependency injection using the options lambda:</p>
    <CodeBlock Lang="C#">
        services.AddFileValidation(options => {
            options.ValidateFilename = ValidationCondition.Always;
            options.ValidateExtension = ValidationCondition.Never;
            options.ValidateContent = ValidationCondition.ServerSide;
            options.ExtensionWhitelist.Add("cs");
            // etc.
        });
    </CodeBlock>
</section>
<section>
    <h3>Tips &amp; Practices</h3>
    <ul>
        <li>The FileValidator will be injected once in the client and once in the server, each can be configured differently.</li>
        <li>Validation switching can be configured centrally (in a shared project) with some rules only run on the server using the <code>ValidationCondition.ServerSide</code> option.</li>
    </ul>
</section>
@* <section>
    <h3>See Also</h3>
    <ul>
        <li></li>
    </ul>
</section> *@

@code {

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        Filename = e.File.Name;
        FileMimeType = e.File.ContentType;
        Validator.Clear();
        var errors = Validator.ValidateFile(e.File);
        if(Validator.IsValid) {
            ClientValidation = "Valid";
        }
        else {
            ClientValidation = $"Found {errors.Count()} problems: " + string.Join(", ", errors.Select(e => e.ErrorMessage));
        }
        ServerValidation = "Uploading...";
        await Task.Delay(100);
        try {
            var blob = await Blobs.CreateAsync(e.File);
            ServerValidation = "Valid";
            await Task.Delay(100);
            Md5Validation = "Downloading...";
            await Task.Delay(100);
            var retrieved = await Blobs.RetrieveAsync(blob.Uuid, blob.Slug);
            Md5Validation = "Downloaded";
            await Task.Delay(100);
            Md5Validation = blob.MD5Hash == retrieved.MD5Hash ? "Valid" : "MD5 Hashes Do Not Match";
        }
        catch(DryException ex) {
            ServerValidation = $"{ex.Message}: {ex.ProblemDetails.Detail}";
        }
    }

    private string Filename { get; set; } = "";

    private string FileMimeType { get; set; } = "";

    private string ClientValidation { get; set; } = "";

    private string ServerValidation { get; set; } = "";

    private string Md5Validation { get; set; } = "";

    [Inject]
    private FileValidator Validator { get; set; } = null!;

    [Inject]
    private BlobService<Blob> Blobs { get; set; } = null!;

}
