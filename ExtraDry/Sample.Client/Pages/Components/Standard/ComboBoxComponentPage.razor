@page "/components/standard/combo-box"

<section>
    <h2>ComboBox</h2>
    <p>
        The <code>&lt;ComboBox&gt;</code> component is a type-ahead compatible replacement for a select control.
    </p>
    <p>
        The component presents combo-box selection of items using a text-only display to enable type-ahead 
        functionality.  For more advanced use-cases, consider the FlextSelect component.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <h5>No View Model</h5>
    <CodeBlock Lang="blazor">
        &lt;ComboBox Items="@@Sectors" Placeholder="@@Placeholder" /&gt;

        @@code {
            private List&lt;Sector&gt; Sectors { get; set; } = ...;
        }
    </CodeBlock>
    <ComboBox Items="@Data" Placeholder="@Placeholder" Sort="@Sort" Grouping="@Grouping" ViewModel="@this" @bind-Value="Value" />
    <h5>Bound Values</h5>
    <h6>Value.Title:</h6>
    @if(Value != null) {
        <div>@Value.Title</div>
    }
    <h6>Value.Description:</h6>
    @if(Value != null) {
        <div>@Value.Description</div>
    }
    <h5>Try It Out</h5>
    <form class="tryitout" onsubmit="return false;">
        <div>
            <label>Placeholder:</label>
            <input type="text" @bind="Placeholder" />
        </div>
        <div>
            <label>Sort:</label>
            <select @bind="Sort">
                <option value="@(ComboBoxSort.None)">ComboBoxSort.None</option>
                <option value="@(ComboBoxSort.Title)">ComboBoxSort.Title</option>
            </select>
        </div>
        <div>
            <label>Grouping:</label>
            <select @bind="Grouping">
                <option value="@(ComboBoxGrouping.Off)">ComboBoxGrouping.Off</option>
                <option value="@(ComboBoxGrouping.Auto)">ComboBoxGrouping.Auto</option>
            </select>
        </div>
    </form>

    <h3>Advanced Usage</h3>
    <h5>No View Model</h5>
    <CodeBlock Lang="blazor">
        &lt;ComboBox ItemsService="@@Sectors" Icon="Sector" ... /&gt;

        @@code {
        [Inject]
        private IListService&lt;Sector&gt; Sectors { get; set; } = null!;
        }
    </CodeBlock>
    <ComboBox ItemsSource="@SectorService" Placeholder="@Placeholder" Sort="@Sort" Grouping="@Grouping" ViewModel="@this" @bind-Value="Value" />
    <h5>Bound Values</h5>
    <h6>Value.Title:</h6>
    @if (Value != null)
    {
        <div>@Value.Title</div>
    }
    <h6>Value.Description:</h6>
    @if (Value != null)
    {
        <div>@Value.Description</div>
    }
    <h5>Try It Out</h5>
    <form class="tryitout" onsubmit="return false;">
        <div>
            <label>Placeholder:</label>
            <input type="text" @bind="Placeholder" />
        </div>
        <div>
            <label>Sort:</label>
            <select @bind="Sort">
                <option value="@(ComboBoxSort.None)">ComboBoxSort.None</option>
                <option value="@(ComboBoxSort.Title)">ComboBoxSort.Title</option>
            </select>
        </div>
        <div>
            <label>Grouping:</label>
            <select @bind="Grouping">
                <option value="@(ComboBoxGrouping.Off)">ComboBoxGrouping.Off</option>
                <option value="@(ComboBoxGrouping.Auto)">ComboBoxGrouping.Auto</option>
            </select>
        </div>
    </form>
</section>
<section>
    <h3>Configuration</h3>
    <p>
        This is a standalone component, no configuration is required.
    </p>
</section>
<section>
    <h3>Semantic Styles</h3>
    <p>The component wraps the <code>MiniCard</code> component and styles are the same as it.</p>
    <CodeBlock Lang="blazor">
        &lt;div class="flexi-select"&gt;
            &lt;label&gt;
                &lt;span class="type"&gt;...&lt;/span&gt;
                &lt;span class="placeholder-text"&gt;...&lt;span&gt;
                &lt;MiniCard ... />
                &lt;button class="unobtrusive">&lt;Icon Key="select" />&lt/button>
            &lt;label>
            &lt;MiniDialog ... />
        &lt;/div>
    </CodeBlock>
</section>
<section>
    <h3>Tips &amp; Practices</h3>
    <ul>
        <li>The component encapsulate the <code>MiniCard</code>, unused attributes are chained to that component.</li>
        <li>The component automatically detects if Thumbnail and Subtitle are present and displays or hides them accordingly.</li>
        <li>Use <code>ShowThumbnail</code> property to force always showing or hiding the Thumbnail.</li>
        <li>Use <code>ShowSubtitle</code> property to force always showing or hiding the Subtitle.</li>
    </ul>
</section>
<section>
    <h3>See Also</h3>
    <ul>
        <li><a href="/components/standard/mini-card"><code>MiniCard</code> Component</a></li>
        <li><a href="/components/standard/mini-dialog"><code>MiniDialog</code> Component</a></li>
        <li><a href="/components/standard/icon"><code>Icon</code> Component</a></li>
    </ul>
</section>
