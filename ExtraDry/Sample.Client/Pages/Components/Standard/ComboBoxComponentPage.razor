@page "/components/standard/combo-box"
@{
// Generated Blazor will create the page constructor in a `#nullable disable` block.  This breaks
// the ability to pass in a collection of not-null objects.
#pragma warning disable CS8620
}

<section>
    <h2>ComboBox</h2>
    <p>
        The <code>&lt;ComboBox&gt;</code> component is a type-ahead compatible replacement for a select control.
    </p>
    <p>
        The component presents combo-box selection of items using a text-only display to enable type-ahead 
        functionality.  For more advanced use-cases, consider the <code>FlexiSelect</code> component.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <p>
        Provide a static list of <code>Items</code> that can be optionally sorted. A <code>ViewModel</code>
        is provided to give access to group names for optional grouping.  Typing into the filter always shows
        all available items as the entire collection is available.
    </p>
    <CodeBlock Lang="blazor">
        &lt;ComboBox Items="@@Sectors" Placeholder="@BasicPlaceholder" Sort="@BasicSort" Group="@BasicGroup" GroupFunc="@@GroupName" ViewModel="@@this" @@bind="Value" /&gt;

        @@code {
            private List&lt;Sector&gt; Sectors { get; set; } = ...;

            private Sector Value { get; set; }

            private string GroupName(Sector sector) => sector.Group;
        }
    </CodeBlock>
    <ComboBox Items="@Data" Placeholder="@BasicPlaceholder" Sort="@BasicSort" Group="@BasicGroup" GroupFunc="@GroupName" ViewModel="@this" @bind-Value="BasicValue" />
    <h5 style="margin-top: 10px;">Bound Value</h5>
    <h6>
        @if(BasicValue == null) {
            <i>not set</i>
        }
        else {
            <b>@BasicValue.Title</b>
        }
    </h6>
    <h5>Try It Out</h5>
    <form class="tryitout" onsubmit="return false;">
        <div>
            <label>Placeholder:</label>
            <input type="text" @bind="BasicPlaceholder" />
        </div>
        <div>
            <label for="basic-sort">Sort:</label>
            <input id="basic-sort" type="checkbox" @bind="BasicSort" />
        </div>
        <div>
            <label for="basic-group">Grouping:</label>
            <input id="basic-group" type="checkbox" @bind="@BasicGroup" />
        </div>
    </form>

    <h3>Advanced Usage</h3>
    <h5>No View Model</h5>
    <CodeBlock Lang="blazor">
        &lt;ComboBox ItemsService="@@Sectors" Icon="@Icon" Placeholder="@AdvancedPlaceholder" Sort="ComboBoxSort.@AdvancedSort" ViewModel="@@this" 
            MoreItemsTemplate="@MoreItemsTemplate" ... /&gt;

        @@code {
            [Inject]
            private IListService&lt;Sector&gt; Sectors { get; set; } = null!;
        }
    </CodeBlock>
    <ComboBox ItemsSource="@SectorService" Icon="@Icon" Placeholder="@AdvancedPlaceholder" Sort="@AdvancedSort" 
        ViewModel="@this" MoreItemsTemplate="@MoreItemsTemplate" @bind-Value="AdvancedValue" />
    <h5 style="margin-top: 10px;">Bound Value</h5>
    <h6>
        @if(AdvancedValue == null) {
            <i>not set</i>
        }
        else {
            <b>@AdvancedValue.Title</b>
        }
    </h6>
    <h6>Value.Description:</h6>
    @if (BasicValue != null)
    {
        <div>@BasicValue.Description</div>
    }
    <h5>Try It Out</h5>
    <form class="tryitout" onsubmit="return false;">
        <div>
            <label>Icon:</label>
            <input type="text" @bind="Icon" />
        </div>
        <div>
            <label>Placeholder:</label>
            <input type="text" @bind="AdvancedPlaceholder" />
        </div>
        <div>
            <label for="advanced-sort">Sort:</label>
            <input id="advanced-sort" type="checkbox" @bind="AdvancedSort" />
        </div>
        <div>
            <label>MoreItemsTemplate:</label>
            <input type="text" @bind="MoreItemsTemplate" />
        </div>
    </form>
</section>
<section>
    <h3>Configuration</h3>
    <p>
        This is a standalone component, no configuration is required.
    </p>
</section>
<section>
    <h3>Semantic Styles</h3>
    <p>The component TODO.</p>
    <CodeBlock Lang="blazor">
        &lt;div class="drop-down"&gt;
            &lt;label&gt;
                &lt;span class="type"&gt;...&lt;/span&gt;
                &lt;span class="placeholder-text"&gt;...&lt;span&gt;
                &lt;MiniCard ... />
                &lt;button class="unobtrusive">&lt;Icon Key="select" />&lt/button>
            &lt;label>
            &lt;MiniDialog ... />
        &lt;/div>
    </CodeBlock>
</section>
<section>
    <h3>Tips &amp; Practices</h3>
    <ul>
        <li>One but not both of `Items` or `ItemsSource` is required to provide data.</li>
        <li>When using `ItemsSource`, `Grouping` is not supported as UI will show confusing, incomplete groups.</li>
        <li>When fetching from `ItemsSource`, a progress bar is shown while waiting.</li>
    </ul>
</section>
<section>
    <h3>See Also</h3>
    <ul>
        <li><a href="/components/standard/mini-card"><code>MiniCard</code> Component</a></li>
        <li><a href="/components/standard/mini-dialog"><code>MiniDialog</code> Component</a></li>
        <li><a href="/components/standard/icon"><code>Icon</code> Component</a></li>
    </ul>
</section>
