@page "/components/standard/value-loader"
@inject NavigationManager Navigation;

<section>
    <h2>Value Loader</h2>
    <p>
        The <code>&lt;ValueLoader&gt;</code> component displays an value after it is loaded with states for Loading, Completed, Error and Timeout.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <CodeBlock Lang="blazor">
        &lt;ValueLoader LoadData=@@GetData/&gt;
    </CodeBlock>

    <div style="width: 200px;border: solid 1px;margin-bottom: 10px;">
        <ValueLoader LoadData=@GetData @ref="_childComponent" />
    </div>

    <h5>Try It Out</h5>
    <form class="tryitout" onsubmit="return false;">
        <div>
            <label>Load result:</label>
            <select @onchange="OnValueChange">
                <option value="@(LoadingState.Complete)">Successful run</option>
                <option value="@(LoadingState.Error)">Failed run</option>
                <option value="@(LoadingState.Timeout)">Timeout</option>
            </select>
        </div>
    </form>
    
</section>
<section>
    <h3>Configuration</h3>
    <p>
        Can add custom CSS classes via the <code>CssClass</code> parameter
    </p>
</section>

@code {
    public LoadingState Value { get; set; } = LoadingState.Complete;
    private ValueLoader? _childComponent;

    async Task OnValueChange(ChangeEventArgs e)
    {
        if(e.Value != null)
        {
            Value = (LoadingState)Enum.Parse(typeof(LoadingState), e.Value.ToString(), true);
        }
        await _childComponent.Refresh();
        StateHasChanged();
    }

    public async Task<object?> GetData()
    {
        await Task.Delay(2000);

        if(Value == LoadingState.Error)
        {
            throw new Exception("Boom");
        }

        if (Value == LoadingState.Timeout)
        {
            throw new TaskCanceledException();
        }

        await Task.Delay(3000);
        return "This is the value";
    }
}