@page "/components/advanced/reveal"
@inject NavigationManager Navigation;

<article>
    <section>
        <h2>Reveal</h2>
        <p>
            The <code>&lt;Reveal&gt;</code> component conditionally displays content and provides
            CSS styles to enable typical visual state changes like appear/disappear, show/hide, and
            expand/collapse.
        </p>
    </section>
    <section>
        <h3>Basic Usage</h3>
        <p>Use a button to call the ToggleAsync method on a Reveal component.  No animation, no styling.</p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal1.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal1" class="reveal-1" >
                Huzzah
            &lt;/Reveal>

            @@code {
                private Reveal Reveal1 { get; set; } = null!;
            }
        </CodeBlock>

        <div>
            <Button @onclick="async () => await Reveal1.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal1" Duration="0">
                Blink
            </Reveal>
        </div>

        <h3>Expand/Collapse Usage</h3>
        <p>Animation duration is set on Reveal and matched in the CSS, height and clipping are used
            to enable a clean expand/collapse animation.  Note the addition of the duration attribute 
            for timing and the KeepInDom attribute.  KeepInDom is retained at the default 'false'
            which unloads the content when it is not shown.
        </p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal2.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal2" CssClass="reveal-2" Duration="500" KeepInDom="false" >
                Huzzah
            &lt;/Reveal>

            @@code {
                private Reveal Reveal2 { get; set; } = null!;
            }
        </CodeBlock>
        with
        <CodeBlock Lang="css">
            ::deep .reveal-2 {
                background-color: #f7f7f7;
                transition: height 0.5s;
                overflow: hidden;

                &.concealing, &.concealed {
                    height: 0;
                }

                &.revealing, &.revealed {
                    height: 50px;
                }
            }
        </CodeBlock>

        <div>
            <Button @onclick="async () => await Reveal2.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal2" CssClass="reveal-2" Duration="500" KeepInDom="false">
                Slide
            </Reveal>
        </div>

        <h3>Show/Hide Usage</h3>
        <p>
            Animation duration is set on Reveal and matched in the CSS, opacity is used
            to enable a clean show/hide animation.  KeepInDom needs to be changed to 'true'
            which ensure the child content is rendered and the space on the page is 
            reserved when the content is not shown.
        </p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal3.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal3" CssClass="reveal-3" Duration="500" KeepInDom="true" >
                Huzzah
            &lt;/Reveal>

            @@code {
                private Reveal Reveal3 { get; set; } = null!;
            }
        </CodeBlock>
        with
        <CodeBlock Lang="css">
            ::deep .reveal-3 {
                background-color: #f7f7f7;
                transition: opacity 0.5s;

                &.concealing, &.concealed {
                    opacity: 0%;
                }

                &.revealing, &.revealed {
                    opacity: 100%;
                }
            }
        </CodeBlock>

        <div>
            <Button @onclick="async () => await Reveal3.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal3" CssClass="reveal-3" Duration="500" KeepInDom="true">
                Huzzah
            </Reveal>
        </div>

    </section> 
    <section>
        <h3>Configuration</h3>
        <p>This is a standalone component and no configuration is required.</p>
    </section>
    <section>
        <h3>Tips &amp; Practices</h3>
        <ul>
            <li>Do not use padding and/or margin on Reveal component when using expand/collapse, undesirable UI pops and tombstones will occur.</li>
        </ul>
    </section>
</article>

@code {

    private Reveal Reveal1 { get; set; } = null!;

    private Reveal Reveal2 { get; set; } = null!;

    private Reveal Reveal3 { get; set; } = null!;

}