@page "/components/advanced/reveal"
@inject NavigationManager Navigation;

<article>
    <section>
        <h2>Reveal</h2>
        <p>
            The <code>&lt;Reveal&gt;</code> component conditionally displays content and provides
            CSS styles to enable typical visual state changes like appear/disappear, show/hide, and
            expand/collapse.
        </p>
    </section>
    <section>

        <h3>Basic Usage</h3>
        <p>Use a button to call the ToggleAsync method on a Reveal component.  No animation, no styling.</p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal" >
                Appear/Disappear
            &lt;/Reveal>

            @@code {
                private Reveal Reveal { get; set; } = null!;
            }
        </CodeBlock>
        <div>
            <Button @onclick="async () => await Reveal1.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal1" Duration="0">
                Appear/Disappear
            </Reveal>
        </div>
        <br />

        <h3>Expand/Collapse Basic Usage</h3>
        <p>
            To automatically expand and collapse, set the mode to Expanding.  Provide Duration to 
            set the animation time in milliseconds and Height to adjust the finished animation height.
        </p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal" Duration="1000" Height="50" Mode="RevealMode.Expand">
                Basic Expand/Collapse
            &lt;/Reveal>
            @@code {
                private Reveal Reveal { get; set; } = null!;
            }
        </CodeBlock>
        <div>
            <Button @onclick="async () => await Reveal4.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal4" Duration="1000" Height="50" Mode="RevealMode.Expand">
                Basic Expand/Collapse
            </Reveal>
        </div>
        <br />

        <h3>Expand/Collapse Custom Usage</h3>
        <p>
            Animation duration is set on Reveal and matched in the CSS, height and clipping are used
            to enable a clean expand/collapse animation.  Mode is explicitly CssOnly (the default),
            to indicate that all visual changes are managed by the associated CSS.
        </p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal" CssClass="reveal" Duration="500" Mode="RevealMode.CssOnly" >
                Advanced Expand/Collapse
            &lt;/Reveal>

            @@code {
                private Reveal Reveal { get; set; } = null!;
            }
        </CodeBlock>
        with
        <CodeBlock Lang="css">
            ::deep .reveal {
                background-color: #f7f7f7;
                transition: height 0.5s;
                overflow: hidden;

                &.concealing, &.concealed {
                    height: 0;
                }

                &.revealing, &.revealed {
                    height: 50px;
                }
            }
        </CodeBlock>
        <div>
            <Button @onclick="async () => await Reveal2.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal2" CssClass="reveal-2" Duration="500" Mode="RevealMode.CssOnly">
                Advanced Expand/Collapse
            </Reveal>
        </div>
        <br />

        <h3>Fade-in/Fade-out Basic Usage</h3>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal" Duration="1000" Mode="RevealMode.Fade" >
                Basic Fade-in/Fade-out
            &lt;/Reveal>

            @@code {
                private Reveal Reveal { get; set; } = null!;
            }
        </CodeBlock>
        <div>
            <Button @onclick="async () => await Reveal5.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal5" Duration="1000" Height="50" Mode="RevealMode.Fade" >
                Basic Fade-in/Fade-out
            </Reveal>
        </div>
        <br />

        <h3>Fade-in/Fade-out Advanced Usage</h3>
        <p>
            Animation duration is set on Reveal and matched in the CSS, opacity is used
            to enable a clean show/hide animation.  KeepInDom needs to be changed to 'true'
            which ensure the child content is rendered and the space on the page is 
            reserved when the content is not shown.
        </p>
        <CodeBlock Lang="blazor">
            &lt;Button @@onclick="async () => await Reveal.ToggleAsync()" Caption="Toggle" />
            &lt;Reveal @@ref="Reveal3" CssClass="reveal" Duration="500" Mode="RevealMode.CssOnly" KeepInDom="true" >
                Advanced Fade-in/Fade-out
            &lt;/Reveal>

            @@code {
                private Reveal Reveal { get; set; } = null!;
            }
        </CodeBlock>
        with
        <CodeBlock Lang="css">
            ::deep .reveal {
                background-color: #f7f7f7;
                transition: opacity 0.5s;

                &.concealing, &.concealed {
                    opacity: 0%;
                }

                &.revealing, &.revealed {
                    opacity: 100%;
                }
            }
        </CodeBlock>
        <div>
            <Button @onclick="async () => await Reveal3.ToggleAsync()" Caption="Toggle" />
            <Reveal @ref="Reveal3" CssClass="reveal-3" Duration="500" KeepInDom="true">
                Huzzah
            </Reveal>
        </div>
        <br />

    </section> 
    <section>
        <h3>Configuration</h3>
        <p>This is a standalone component and no configuration is required.</p>
    </section>
    <section>
        <h3>Tips &amp; Practices</h3>
        <ul>
            <li>Do not use padding and/or margin on Reveal component when using expand/collapse, undesirable UI pops and tombstones will occur.</li>
        </ul>
    </section>
</article>

@code {

    private Reveal Reveal1 { get; set; } = null!;

    private Reveal Reveal2 { get; set; } = null!;

    private Reveal Reveal3 { get; set; } = null!;

    private Reveal Reveal4 { get; set; } = null!;

    private Reveal Reveal5 { get; set; } = null!;

}