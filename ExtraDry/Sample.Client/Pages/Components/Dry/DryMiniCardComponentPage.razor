@page "/components/dry/dry-mini-card"
@implements ISubjectViewModel<Employee>
@inject ISubjectViewModel<Employee> EmployeeViewModel;

<section>
    <h2>DryMiniCard</h2>
    <p>
        The <code>&lt;DryMiniCard&gt;</code> component consistently displays small cards that represent single entities using a Model and ViewModel.
    </p>
    <p>
        The card will always display a title and will optionally display a thumbnail and subtitle.  
        By default they are arranged with a tall thumbnail to the left and the title and subtitle stacked.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <h5>No View Model</h5>
    <CodeBlock Lang="blazor">
        &lt;DryMiniCard Model="@@Model" /&gt;

        @@code {
            private Employee Model { get; set; } = new Employee { FirstName = "Bob", LastName = "Smith", 
                Email = "bob.smith@example.com" };
        }
    </CodeBlock>
    <DryMiniCard Model="@Model" />
    <h5>Inject View Model Controller</h5>
    <CodeBlock Lang="blazor">
        @@inject ISubjectViewModel&lt;Employee> EmployeeViewModel

        &lt;DryMiniCard Model="@@Model" ViewModel="@@EmployeeViewModel" /&gt;

        @@code {
            private Employee Model { get; set; } = new Employee { FirstName = "Bob", LastName = "Smith", 
                Email = "bob.smith@example.com" };
        }
    </CodeBlock>
    <DryMiniCard Model="@Model" ViewModel="@EmployeeViewModel" />
    <h5>Page is View Model Controller <small>(preferred)</small></h5>
    <CodeBlock Lang="blazor">
        @@implements ISubjectViewModel&lt;Employee>

        &lt;DryMiniCard Model="@@Model" ViewModel="@@this" /&gt;

        @@code {
            private Employee Model { get; set; } = new Employee { FirstName = "Bob", LastName = "Smith", 
                Email = "bob.smith@example.com" };

            public string Title(Employee employee) => string.Format(Template, employee.FirstName, employee.LastName);

            public string Subtitle(Employee employee) => employee.Email;

            public string Thumbnail(Employee employee) => Gravatar.ToGravatarUrl(employee.Email, 40);

            public string Template { get; set; } = "@Template";

            ...
        }
    </CodeBlock>
    <p>
        <DryMiniCard Model="@Model" ViewModel="@this" />
    </p>
    <h5>Try It Out</h5>
    <form class="tryitout" onsubmit="return false;">
        <p>
            Try adjusting the title's template, e.g. "{0}", "{0} {1}", "{1}, {0}".
        </p>
        <div>
            <label>Template:</label>
            <input type="text" @bind="@Template" />
        </div>
    </form>
</section>
<section>
    <h3>Configuration</h3>
    <p>
        This is a standalone component, no configuration is required.
    </p>
    <h5>Semantic Styles</h5>
    <p>The component wraps the <code>MiniCard</code> component and styles are the same as it.</p>
</section>
<section>
    <h3>Tips &amp; Practices</h3>
    <ul>
        <li>The component encapsulate the <code>MiniCard</code>, unused attributes are chained to that component.</li>
        <li>The component automatically detects if Thumbnail and Subtitle are present and displays or hides them accordingly.</li>
        <li>Use <code>ShowThumbnail</code> property to force always showing or hiding the Thumbnail.</li>
        <li>Use <code>ShowSubtitle</code> property to force always showing or hiding the Subtitle.</li>
    </ul>
</section>
<section>
    <h3>See Also</h3>
    <ul>
        <li><a href="/components/standard/mini-card"><code>MiniCard</code> Component</a></li>
    </ul>
</section>

@code {
    private Employee Model { get; set; } = new Employee { FirstName = "Bob", LastName = "Smith", Email = "bob.smith@example.com" };

    public string Code(Employee _) => string.Empty;

    public string Title(Employee employee) => string.Format(Template, employee.FirstName, employee.LastName);

    public string Subtitle(Employee employee) => employee.Email;

    public string Caption(Employee employee) => $"{employee.FirstName} {employee.LastName} ({employee.Email})";

    public string Thumbnail(Employee employee) => Gravatar.ToGravatarUrl(employee.Email, 40);

    public string Description(Employee _) => string.Empty;

    public string Template { get; set; } = "{0} {1}";

}
