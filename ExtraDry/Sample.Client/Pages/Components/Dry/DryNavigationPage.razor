@page "/components/dry/dry-navigation"

<section>
    <h2>DryNavigation</h2>
    <p>
        The <code>&lt;DryNavigation&gt;</code> component consistently displays navigation menus 
        from either a local list of menus or a global menu heirarchy.  
    </p>
    <p>
        The control manages the display and interaction with menu components.  Display of menu 
        items uses the MiniCard control for icon, title and sub-title display.  The interaction 
        uses either a static navigation link defined in the Menu, or a Action provided by a lambda 
        expression.  Display of menus automatically adjusts styles for active items, and using 
        MenuDepth, can swap out the entire menu to the correct menu in the active heirarchy.
    </p>
</section>
<section>
    <h3>Basic Usage</h3>
    <CodeBlock Lang="Blazor">
        &lt;DryNavigation Menu="@@TheMenu" MenuDepth="0" />
        &lt;DryNavigation Menu="@@TheMenu" MenuDepth="1" />

        @@code {
            private Menu TheMenu => ...;
        }
    </CodeBlock>
    <DryNavigation Menu="@TheMenu" MenuDepth="0" />
    <DryNavigation Menu="@TheMenu" MenuDepth="1" />
</section>
<section>
    <h3>Configuration</h3>
    <p>
        While the Menu that is provided to the component may be generated within the hosting page, 
        it is recommended that a global Menu is created.  Place the menu in a DI accessible class, 
        such as 'AppViewModel', and inject it into the page for consumption in the component.
    </p>
    <p>
        Navigation components will typically span pages so should be included in the MainLayout
        and use navigation links that resolve to new pages in the Blazor application.  This example
        uses URI bookmarks so that the page doesn't refresh on each navigation.  A snippet follows:
    </p>
    <CodeBlock Lang="Blazor">
        @@code {
            private Menu TheMenu => new Menu {
                Title = "Main Menu",
                Children = new Menu[] {
                    new Menu {
                        Title = "Shapes",
                        NavLink = "#shapes-triangle",
                        ActiveMatch = "#shapes",
                        Children = new Menu[] {
                            new Menu {
                                NavLink = "#shapes-triangle",
                                Title = "Triangle",
                            },
                        ...
    </CodeBlock>
    <h5>Semantic Styles</h5>
    <p>The component uses a nav tag wrapping an unordered list of hyperlinks.  Each hyperlink is 
        rendered with a <code>DryMiniCard</code> component.</p>
    <CodeBlock Lang="HTML">
        &lt;nav class="dry-navigation">
            &lt;ul>
                &lt;li class="active/inactive">
                    &lt;a>
                        &lt;DryMiniCard Model="@@MenuItem" />
                    &lt;/a>
                &lt;/li>
                ...
            &lt;/ul>
        &lt;/nav>
    </CodeBlock>
</section>
<section>
    <h3>Tips &amp; Practices</h3>
    <ul>
        <li>Create a global menu heirarchy and attach to a App specific view-model.</li>
        <li>For each level of menus, create a razor component (e.g. ModulesNav and SubModulesNav)</li>
        <li>Use the NavAction property to define navigations that might change based on context.</li>
        <li>Define the Menu generation as singleton with a method on the view-model, this allows lambda expressions to access dependencies injected into the app view-model.</li>
    </ul>
</section>
<section>
    <h3>See Also</h3>
    <ul>
        <li><a href="/components/dry/dry-mini-card"><code>DryMiniCard</code> Component</a></li>
        <li><a href="/components/dry/dry-menu"><code>DryMenu</code> Component</a></li>
    </ul>
</section>

@code {
    private Menu TheMenu => new Menu
    {
        Title = "Main Menu",
        Children = new Menu[]
        {
            new Menu
            {
                Title = "Shapes",
                NavLink = "#shapes-triangle",
                ActiveMatch = "#shapes",
                Children = new Menu[]
                {
                    new Menu
                    {
                        NavLink = "#shapes-triangle",
                        Title = "Triangle",
                    },
                    new Menu
                    {
                        NavLink = "#shapes-square",
                        Title = "Square",
                    },
                    new Menu
                    {
                        NavLink = "#shapes-circle",
                        Title = "Circle",
                    },
                }
            },
            new Menu
            {
                Title = "Colors",
                NavLink = "#colors-red",
                ActiveMatch = "#colors",
                Children = new Menu[]
                {
                    new Menu
                    {
                        NavLink = "#colors-red",
                        Title = "Red",
                    },
                    new Menu
                    {
                        NavLink = "#colors-green",
                        Title = "Green",
                    },
                    new Menu
                    {
                        NavLink = "#colors-blue",
                        Title = "Blue",
                    },
                }
            }
        }
    };

}
