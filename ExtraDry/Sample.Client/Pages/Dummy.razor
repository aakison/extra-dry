@page "/dummy/{id}"

<h3>Dummy</h3>
<div>@Id</div>

@{
    var count = 100;
    var size = "several";
    if(count < 10) {
        size = "few";
    }
    if(count > 40) {
        size = "many";
    }
    var data = new List<string>();
    @for(int i = 0; i < count; ++i) {
        data.Add($"Huzzah {i}");
    }

    Users.Add(new User("Adrian Akison", "adrian.akison@fmiworks.com"));
    Users.Add(new User("David Wilton", "david.wilton@fmiworks.com"));
    Users.Add(new User("Shae Griffiths", "shae.griffiths@fmiworks.com"));
    Users.Add(new User("Sam Camilleri", "sam.camilleri@fmiworks.com"));
    Users.Add(new User("Hai Vu", "hai.vu@fmiworks.com"));
    Users.Add(new User("Jaspal Muker", "jaspal.muker@fmiworks.com"));
    Users.Add(new User("Anthony Pasquale", "antonio.pasquale@fmiworks.com"));
    Users.Add(new User("Wayne Scott", "wayne.scott@fmiworks.com"));
    Users.Add(new User("Kevin Thomas", "kevin.thomase@fmiworks.com"));

    UserViewModels = Users.Select(e => new UserViewModel(e)).ToList();

}

<div>@TestSelect?.Title</div>

<FlexiSelect CssClass="@size" Data="@UserViewModels" MultiSelect="false" @bind-Value="TestSelect" style="height: 50px;" />
<FlexiSelect CssClass="@size" Data="@data" MultiSelect="true" />

@*<DryFlexiSelect Model="@this" PropertyName="@nameof(Users)" />*@

@code {

    public class User {
        public User(string name, string email)
        {
            Name = name;
            Email = email;
        }

        public string Name { get; set; }
        public string Email { get; set; }
    }

    //public string Thumbnail(User user) => Gravatar.ToGravatarUrl(user.Email, 40);

    //public string Title(User user) => user.Name;

    //public string Subtitle(User user) => user.Email;

    public interface ISubjectViewModel
    {
        /// <summary>
        /// The title for the card.
        /// </summary>
        string Code { get; }

        /// <summary>
        /// The title for the card.
        /// </summary>
        string Title { get; }

        /// <summary>
        /// An optional subtitle to be displayed with a MiniCard.
        /// </summary>
        string Subtitle { get; }

        /// <summary>
        /// An optional subtitle to be displayed with a MiniCard.
        /// </summary>
        string Caption { get; }

        /// <summary>
        /// An optional thumbnail to be presented with each of the cards.
        /// </summary>
        string Thumbnail { get; }

    }

    public class UserViewModel : ViewModel<User>
    {
        public UserViewModel(User user) : base(user) { }

        public override string Title => Model.Name;

        public override string Subtitle => Model.Email;

        public override string Thumbnail => Gravatar.ToGravatarUrl(Model.Email, 40);
    }

    public List<User> Users { get; set; } = new();

    public List<UserViewModel> UserViewModels { get; set; } = new();

    public UserViewModel TestSelect { get; set; }

    public async Task OnClick()
    {
        var t = new InputText();
        await MiniDialog.ShowAsync();
    }

    public async Task OnClick2()
    {
        await MiniDialog2.ShowAsync();
    }

    public void AlertClick(DialogEventArgs _)
    {
        Console.WriteLine("Alert Click");
    }

    [Parameter]
    public string Id { get; set; }

    private MiniDialog MiniDialog { get; set; }

    private MiniDialog MiniDialog2 { get; set; }

}
