@namespace Blazor.ExtraDry
@typeparam T
@inherits OwningComponentBase

<div class="field @CssClass @SizeClass">
    <label class="@CssClass" @onclick="ToggleDescription" title="@TextDescription">
        <span class="caption">@Property.FieldCaption</span>
        @if(Property.HasDescription) {
            <i class="description"></i>
        }
        @if(ReadOnly) { 
            <i class="read-only"></i>
        }
        @if(Editable && !Property.HasDiscreteValues) { 
            if(Property.IsRequired) {
                <i class="required"></i>
            }
            else {
                <i class="optional"></i>
            }
        }
    </label>
    @if(HasDescription && ShowDescription) {
        <span class="description @CssClass">@((MarkupString)HtmlDescription)</span>
    }
    @if(Property.HasBooleanValues) {
        var value = ((bool?)Property.GetValue(Model) ?? false) == true;
        <input type="checkbox" checked="@value" @onchange="HandleChange" />
    }
    else if(Property.HasDiscreteValues) {
        var selectedValue = Property.GetValue(Model);
        @if(Property.ControlType == ControlType.RadioButtons) {
            <div class="radio-buttons @Property.DisplayClass">
                @foreach (var value in Property.GetDiscreteValues()) {
                    var selected = value.Key.ToString() == selectedValue?.ToString(); // force object to enum compare
                    var valueClassName = value.Key.ToString().ToLower();
                    var selectedClassName = selected ? $"selected {valueClassName}" : $"{valueClassName}";
                    <button class="@selectedClassName" @onclick="@(e => HandleClick(value.Key))">
                        @if(!string.IsNullOrWhiteSpace(Property.IconTemplate)) {
                            var source = string.Format(Property.IconTemplate, valueClassName);
                            <img class="@valueClassName" src="@source" />
                        }
                        @if(!string.IsNullOrWhiteSpace(Property.CaptionTemplate)) {
                            var content = string.Format(Property.CaptionTemplate, value.Display);
                            <span class="@valueClassName">@content</span>
                        }
                    </button>
                }
            </div>
        }
        else { 
            @if(ReadOnly) {
                <select class="@CssClass readonly" disabled>
                    <option value="@selectedValue.ToString()" selected>@selectedValue.ToString()</option>
                </select>
            } 
            else { 
                <select class="@CssClass" @onchange="HandleChange" >
                    @foreach(var value in Property.GetDiscreteValues()) {
                        var selected = value.Key.ToString() == selectedValue?.ToString(); // force object to enum compare
                        <option value="@value.Key" selected="@selected">@value.Display</option>
                    }
                </select>
            }
        }
    }
    else if(Property.HasTextRepresentation) {
        if(Property.MaxLength?.Length > 256) {
            var rows = Math.Min(Property.MaxLength?.Length / 100 ?? 1, 10);
            <textarea class="@CssClass" rows="@rows" readonly="@ReadOnly" placeholder="@Property.Display?.Prompt" @onchange="HandleChange">@Value</textarea>
        }
        else { 
            <input class="@CssClass" type="text" value="@Value" readonly="@ReadOnly" placeholder="@Property.Display?.Prompt" @onchange="HandleChange" />
        }
    } 
    else if(LookupProviderOptions != null) {
        var selectedValue = Property.GetValue(Model);
        @if(Property.HasArrayValues) {
            <DryMultipleSelect Model="@Model" Property="@Property" Values="@LookupValues" />
        }
        else if(ReadOnly) {
            <select class="@CssClass readonly" disabled>
                <option value="@selectedValue.ToString()" selected>@selectedValue.ToString()</option>
            </select>
        }
        else { 
            <select class="@CssClass" @onchange="HandleChange">
                @if(selectedValue == null) {
                    <option value="" disabled selected>@Property.Display?.Prompt</option>
                }
                @foreach(var option in LookupProviderOptions) {
                    var selected = option.Value.Equals(selectedValue);
                    <option value="@option.Key" selected="@selected">@option.Value.ToString()</option>
                }
            </select>
        }
    }
    else { 
        <progress>loading...</progress>
    }
    @if(!valid) {
        <span class="validation @CssClass">@validationMessage</span>
    }
</div>
